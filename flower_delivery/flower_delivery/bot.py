import sys
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
import django
django.setup()

from shop.models import Order, OrderItem
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

BOT_TOKEN = '7558727339:AAFkPjY1BSCHYBoNW5fOtDmuNDYz90kvYYA'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    try:
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞")
        keyboard = [
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("–ú–æ–π –∑–∞–∫–∞–∑", callback_data="my_order")],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="help")],
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", callback_data="payment")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ FlowerDelivery. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def handle_callback(update, context):
    try:
        query = update.callback_query
        user_name = query.from_user.username or "–ì–æ—Å—Ç—å"

        logger.info(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {query.data}")
        await query.answer()

        if query.data == "register":
            await query.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        elif query.data == "my_order":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            orders = Order.objects.filter(telegram_username=user_name).prefetch_related("orderitem_set")
            if not orders.exists():
                await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
            for order in orders:
                for item in order.orderitem_set.all():
                    photo_url = item.flower.image.url if item.flower.image else None
                    caption = (f"üå∏ –ë—É–∫–µ—Ç: {item.flower.name}\n"
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
                               f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ{item.quantity * item.flower.price}")
                    if photo_url:
                        await query.message.reply_photo(photo=photo_url, caption=caption)
                    else:
                        await query.message.reply_text(caption)
        elif query.data == "payment":
            await query.message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã: http://127.0.0.1:8000/payment/")
        elif query.data == "help":
            await query.message.reply_text("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 123 456 78 90")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def setup_bot():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))

        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    setup_bot()

